
import os, io, csv, pytz
from openpyxl import Workbook
from datetime import datetime, timedelta, time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

from db import (
    init_db, add_plan_rows, get_rooms, get_rooms_for_maid, get_room, set_status, toggle_type,
    set_comment, clear_date, stats, upsert_user, get_user, set_setting, get_setting
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TIMEZONE = os.getenv("TIMEZONE", "Asia/Tashkent")
ADMIN_IDS = set(int(x) for x in os.getenv("ADMIN_IDS","").split(",") if x.strip().isdigit())
REPORT_CHAT_ID = int(os.getenv("REPORT_CHAT_ID","0") or "0")
REPORT_TIME = os.getenv("REPORT_TIME","18:00")
AUTOCARRYOVER = (os.getenv("AUTOCARRYOVER","true").lower() == "true")

def tz():
    return pytz.timezone(TIMEZONE)

def now_local():
    return datetime.now(tz())

def day_str(dt=None):
    return (dt or now_local()).strftime("%Y-%m-%d")

def is_admin(user_id):
    return (user_id in ADMIN_IDS) if ADMIN_IDS else True

def room_keyboard(room_id, status, cleaning_type):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –£–±—Ä–∞–Ω–æ" if status!="–£–±—Ä–∞–Ω–æ" else "‚Ü©Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –ù–ï —É–±—Ä–∞–Ω–æ",
                              callback_data=f"status:{room_id}:{'–£–±—Ä–∞–Ω–æ' if status!='–£–±—Ä–∞–Ω–æ' else '–ù–µ —É–±—Ä–∞–Ω–æ'}")],
        [InlineKeyboardButton(f"üîÅ –¢–∏–ø: {cleaning_type}", callback_data=f"toggle:{room_id}")],
        [InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment:{room_id}")],
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    upsert_user(update.effective_user.id, update.effective_user.full_name)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ —É–±–æ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ üßπ\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/plan ‚Äî –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/my ‚Äî –º–æ–∏ –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/export_csv /export_xlsx ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞\n"
        "/upload_plan ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV (–∞–¥–º–∏–Ω)\n"
        "/resetday ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω (–∞–¥–º–∏–Ω)\n"
        "/carryover [YYYY-MM-DD] ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ—É–±—Ä–∞–Ω–Ω—ã–µ (–∞–¥–º–∏–Ω)\n"
        "/set_tz Asia/Tashkent ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–∞–¥–º–∏–Ω)\n"
        "/iam <–ò–º—è> ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –∏–º—è"
    )

async def cmd_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = day_str()
    rooms = get_rooms(d)
    if not rooms:
        await update.message.reply_text("–ü–ª–∞–Ω –ø—É—Å—Ç. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —á–µ—Ä–µ–∑ /upload_plan.")
        return
    lines = [f"üßæ –ü–ª–∞–Ω –Ω–∞ {d}:"]
    for rid, room_no, maid, maid_tg_id, ctype, status, comment in rooms:
        line = f"‚Ä¢ ‚Ññ{room_no} ‚Äî {ctype}, –≥–æ—Ä–Ω–∏—á–Ω–∞—è: {maid or '-'} ‚Äî {status}"
        if comment: line += f" ‚Äî üìù {comment}"
        lines.append(line)
    await update.message.reply_text("\n".join(lines))

async def cmd_my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = day_str()
    usr = get_user(update.effective_user.id)
    rooms = get_rooms_for_maid(d, maid_tg_id=update.effective_user.id)
    if not rooms and usr and usr[1]:
        rooms = get_rooms_for_maid(d, maid_name=usr[1])
    if not rooms:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return
    for rid, room_no, maid, maid_tg_id, ctype, status, comment in rooms:
        await update.message.reply_text(f"‚Ññ{room_no} ‚Ä¢ {ctype} ‚Ä¢ {status}", reply_markup=room_keyboard(rid, status, ctype))

async def cmd_chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    title = getattr(chat, "title", "") or "(–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è)"
    await update.message.reply_text(f"Chat ID: {chat.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await build_report_text()
    msg = await update.message.reply_text(text)
    # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏–Ω–∏—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω
    try:
        await update.effective_chat.pin_message(msg.message_id)
    except Exception:
        pass

async def build_report_text():
    d = day_str()
    s = stats(d)
    percent = 0 if s['total']==0 else round(s['cleaned']*100/s['total'])
    return (f"üìä –û—Ç—á—ë—Ç –Ω–∞ {d}\n"
            f"–í—Å–µ–≥–æ: {s['total']} ‚Ä¢ –£–±—Ä–∞–Ω–æ: {s['cleaned']} ({percent}%) ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {s['remaining']}\n"
            f"–ü–æ–ª–Ω–∞—è —É–±–æ—Ä–∫–∞: {s['full_cleaned']}/{s['full_total']}")

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    if REPORT_CHAT_ID == 0: return
    text = await build_report_text()
    msg = await context.bot.send_message(chat_id=REPORT_CHAT_ID, text=text)
    try:
        await context.bot.pin_chat_message(chat_id=REPORT_CHAT_ID, message_id=msg.message_id, disable_notification=True)
    except Exception:
        pass
    # –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ—É–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if AUTOCARRYOVER:
        tomorrow = day_str(now_local() + timedelta(days=1))
        from db import get_rooms  # reimport safe
        # –ø–µ—Ä–µ–Ω–æ—Å–∏–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É ‚Äî –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∞–¥–º–∏–Ω —Å–¥–µ–ª–∞–µ—Ç –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –∑–¥–µ—Å—å –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π job –ø—Ä–∏ 23:55.

async def cmd_upload_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ CSV: room_no,maid,cleaning_type (–ü–æ–ª–Ω–∞—è/–¢–µ–∫—É—â–∞—è). –î–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–ª–∞–Ω.")
        return
    doc = update.message.document
    if not doc or not doc.file_name.lower().endswith(".csv"):
        await update.message.reply_text("–ù—É–∂–µ–Ω CSV-—Ñ–∞–π–ª.")
        return
    f = await doc.get_file()
    bio = io.BytesIO()
    await f.download(out=bio)
    bio.seek(0)
    text = bio.read().decode("utf-8-sig")
    reader = csv.DictReader(io.StringIO(text), fieldnames=["room_no","maid","cleaning_type"])
    rows = []
    d = day_str()
    for row in reader:
        room_no = (row.get("room_no") or "").strip()
        if not room_no or room_no.lower().startswith("room_no"): continue
        maid = (row.get("maid") or "").strip() or None
        ctype = (row.get("cleaning_type") or "–¢–µ–∫—É—â–∞—è").strip()
        if ctype not in ("–ü–æ–ª–Ω–∞—è","–¢–µ–∫—É—â–∞—è"): ctype = "–¢–µ–∫—É—â–∞—è"
        rows.append({"work_date": d, "room_no": room_no, "maid": maid, "maid_tg_id": None, "cleaning_type": ctype})
    if not rows:
        await update.message.reply_text("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
        return
    clear_date(d)
    add_plan_rows(rows)
    await update.message.reply_text(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –Ω–∞ {d}. /plan ‚Äî —Å–ø–∏—Å–æ–∫, /my ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≥–æ—Ä–Ω–∏—á–Ω—ã—Ö.")
    # –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
    rooms = get_rooms(d)
    for rid, room_no, maid, maid_tg_id, ctype, status, comment in rooms:
        await update.message.reply_text(f"‚Ññ{room_no} ‚Ä¢ {ctype} ‚Ä¢ {maid or '-'} ‚Ä¢ {status}", reply_markup=room_keyboard(rid, status, ctype))

async def cmd_resetday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return
    d = day_str()
    clear_date(d)
    await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ {d} –æ—á–∏—â–µ–Ω.")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    action = data[0]
    room_id = int(data[1])
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –≥–æ—Ä–Ω–∏—á–Ω–∞—è
    r = get_room(room_id)
    if r:
        _, work_date, _, maid_name, maid_tg_id, _, _, _, _ = r
        user_id = query.from_user.id
        user_ok = is_admin(user_id) or (maid_tg_id == user_id)
        if not user_ok:
            # –µ—Å–ª–∏ tg_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–ª–∞–Ω–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≤–µ—Ä–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏
            usr = get_user(user_id)
            if usr and usr[1] and maid_name and usr[1].strip().lower() == maid_name.strip().lower():
                user_ok = True
        if not user_ok:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –≥–æ—Ä–Ω–∏—á–Ω–∞—è –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            return

    if action == "status":
        new_status = data[2]
        set_status(room_id, new_status, query.from_user.full_name)
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    elif action == "toggle":
        new_type = toggle_type(room_id)
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"–¢–∏–ø —É–±–æ—Ä–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_type}")
    elif action == "comment":
        context.user_data["await_comment_for"] = room_id
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text or ""

    # --- —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–æ–º–µ—Ä—É ---
    if "await_comment_for" in context.user_data:
        rid = context.user_data.pop("await_comment_for")
        set_comment(rid, txt, update.message.from_user.full_name)
        await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω üìù")
        return

    # --- –∫–æ–º–∞–Ω–¥–∞ /iam –ò–º—è ---
    if txt.startswith("/iam "):
        name = txt[5:].strip()
        if not name:
            await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /iam –°–µ–≤–∞—Ä–∞")
            return
        upsert_user(update.effective_user.id, name=name)
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª –∏–º—è: {name}")
        return

    # --- /export_csv ---
    if txt.startswith("/export_csv"):
        d = day_str()
        rows = get_rooms(d)
        buff = io.StringIO()
        writer = csv.writer(buff)
        writer.writerow(["work_date","room_no","maid","cleaning_type","status","comment"])
        for rid, room_no, maid, maid_tg_id, ctype, status, comment in rows:
            writer.writerow([d, room_no, maid or "", ctype, status, comment or ""])
        buff.seek(0)
        await update.message.reply_document(
            document=InputFile(io.BytesIO(buff.getvalue().encode("utf-8")),
                               filename=f"cleaning_{d}.csv")
        )
        return

    # --- /export_xlsx (—á–µ—Ä–µ–∑ openpyxl, –ë–ï–ó pandas) ---
    if txt.startswith("/export_xlsx"):
    from openpyxl import Workbook
       d = day_str()
    rows = get_rooms(d)

    wb = Workbook()
    ws = wb.active
    ws.title = "–£–±–æ—Ä–∫–∞"
    ws.append(["–î–∞—Ç–∞", "‚Ññ –ù–æ–º–µ—Ä–∞", "–ì–æ—Ä–Ω–∏—á–Ω–∞—è", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    for rid, room_no, maid, maid_tg_id, ctype, status, comment in rows:
        ws.append([d, room_no, maid or "", ctype, status, comment or ""])

    bio = io.BytesIO()
    wb.save(bio)
    bio.seek(0)
    await update.message.reply_document(
        document=InputFile(bio, filename=f"cleaning_{d}.xlsx")
    )
    return

    # --- –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
    if txt.startswith("/plan"):
        await cmd_plan(update, context); return
    if txt.startswith("/my"):
        await cmd_my(update, context); return
    if txt.startswith("/report"):
        await cmd_report(update, context); return
    if txt.startswith("/upload_plan"):
        await cmd_upload_plan(update, context); return
    if txt.startswith("/resetday"):
        await cmd_resetday(update, context); return
    if txt.startswith("/set_tz "):
        # –∞–¥–º–∏–Ω—Å–∫–∞—è: /set_tz Asia/Tashkent
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
            return
        tz = txt[8:].strip()
        try:
            _ = pytz.timezone(tz)
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")
            return
        global TIMEZONE
        TIMEZONE = tz
        set_setting("TIMEZONE", tz)
        await update.message.reply_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
        return
    if update.message.text.startswith("/export_xlsx"):
        d = day_str()
    rows = get_rooms(d)

    wb = Workbook()
    ws = wb.active
    ws.title = "–£–±–æ—Ä–∫–∞"
    ws.append(["–î–∞—Ç–∞", "‚Ññ –ù–æ–º–µ—Ä–∞", "–ì–æ—Ä–Ω–∏—á–Ω–∞—è", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])

    for rid, room_no, maid, maid_tg_id, ctype, status, comment in rows:
        ws.append([d, room_no, maid or "", ctype, status, comment or ""])

    bio = io.BytesIO()
    wb.save(bio)
    bio.seek(0)
    await update.message.reply_document(
        document=InputFile(bio, filename=f"cleaning_{d}.xlsx")
    )
    return
def schedule_jobs(app):
    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
    if REPORT_CHAT_ID and REPORT_TIME:
        hh, mm = (int(x) for x in REPORT_TIME.split(":"))
        app.job_queue.run_daily(daily_report, time=time(hour=hh, minute=mm, tzinfo=tz()))
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî nightly carryover –≤ 23:55
    if os.getenv("AUTOCARRYOVER","true").lower()=="true":
        async def nightly(context):
            from db import stats as _stats
            s = _stats(day_str())
            if s['remaining']>0 and REPORT_CHAT_ID:
                await context.bot.send_message(REPORT_CHAT_ID, f"‚Ü™Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –Ω–µ—É–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /carryover YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
        app.job_queue.run_daily(nightly, time=time(hour=23, minute=55, tzinfo=tz()))

def main():
    init_db()
    tz_saved = get_setting("TIMEZONE")
    global TIMEZONE
    if tz_saved: TIMEZONE = tz_saved

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    schedule_jobs(app)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    # –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ /plan –≤ –ø—Ä–∏–≤–∞—Ç/–≥—Ä—É–ø–ø–µ
    app.add_handler(CommandHandler("plan", cmd_plan))
    app.add_handler(CommandHandler("my", cmd_my))
    app.add_handler(CommandHandler("report", cmd_report))
    app.add_handler(CommandHandler("chatid", cmd_chatid))
    app.add_handler(CommandHandler("upload_plan", cmd_upload_plan))
    app.add_handler(CommandHandler("resetday", cmd_resetday))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
