import os
import io
import csv
import re
import sqlite3
from datetime import datetime, timedelta, time as dtime
from typing import List, Tuple, Optional

import pytz
from dotenv import load_dotenv
from openpyxl import Workbook

from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
TIMEZONE = os.getenv("TIMEZONE", "Asia/Tashkent").strip() or "Asia/Tashkent"
REPORT_CHAT_ID = int(os.getenv("REPORT_CHAT_ID", "0") or 0)
REPORT_TIME = os.getenv("REPORT_TIME", "18:00").strip() or "18:00"
AUTOCARRYOVER = os.getenv("AUTOCARRYOVER", "true").lower() == "true"
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()]

def tz() -> pytz.BaseTzInfo:
    try:
        return pytz.timezone(TIMEZONE)
    except Exception:
        return pytz.timezone("Asia/Tashkent")

def now_local() -> datetime:
    return datetime.now(tz())

def day_str(dt: Optional[datetime] = None) -> str:
    return (dt or now_local()).strftime("%Y-%m-%d")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ë–î (SQLite)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DB_PATH = "asal.db"

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA journal_mode=WAL")
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS plan (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                day TEXT NOT NULL,
                room_no INTEGER NOT NULL,
                maid TEXT NOT NULL,
                ctype TEXT NOT NULL,     -- –ü–æ–ª–Ω–∞—è / –¢–µ–∫—É—â–∞—è
                status TEXT NOT NULL DEFAULT '–ù–∞–∑–Ω–∞—á–µ–Ω–æ', -- –ù–∞–∑–Ω–∞—á–µ–Ω–æ/–í –ø—Ä–æ—Ü–µ—Å—Å–µ/–ì–æ—Ç–æ–≤–æ/–ù–µ —É–±—Ä–∞–Ω–æ
                comment TEXT
            )
        """)
    conn.close()

init_db()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã –ë–î
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def clear_day(day: str):
    conn = db()
    with conn:
        conn.execute("DELETE FROM plan WHERE day=?", (day,))
    conn.close()

def insert_rows(day: str, rows: List[Tuple[int, str, str]]):
    conn = db()
    with conn:
        conn.executemany(
            "INSERT INTO plan(day, room_no, maid, ctype) VALUES (?,?,?,?)",
            [(day, int(r), m, c) for r, m, c in rows],
        )
    conn.close()

def get_rooms(day: str):
    conn = db()
    cur = conn.execute(
        "SELECT room_no, maid, ctype, status, COALESCE(comment,'') comment "
        "FROM plan WHERE day=? ORDER BY room_no", (day,)
    )
    rows = cur.fetchall()
    conn.close()
    return rows

def get_stats(day: str):
    conn = db()
    cur = conn.execute(
        "SELECT "
        "COUNT(*) as total, "
        "SUM(CASE WHEN status='–ì–æ—Ç–æ–≤–æ' THEN 1 ELSE 0 END) as done, "
        "SUM(CASE WHEN status!='–ì–æ—Ç–æ–≤–æ' THEN 1 ELSE 0 END) as left "
        "FROM plan WHERE day=?", (day,)
    )
    row = cur.fetchone()
    conn.close()
    total = row["total"] or 0
    done = row["done"] or 0
    left = row["left"] or 0
    return total, done, left

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–∞—Ä—Å–µ—Ä CSV ‚Äî ¬´–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _decode_bytes(b: bytes) -> str:
    # 1) UTF-8 (–≤–∫–ª—é—á–∞—è BOM)
    try:
        return b.decode("utf-8-sig")
    except UnicodeDecodeError:
        pass
    # 2) Windows-1251
    try:
        return b.decode("cp1251")
    except UnicodeDecodeError:
        # 3) –ù–∞ –∫—Ä–∞–π ‚Äî –∏–≥–Ω–æ—Ä –±–∏—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return b.decode("utf-8", errors="ignore")

def parse_plan_csv_bytes(b: bytes) -> List[Tuple[int, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (room_no, maid, ctype)
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –∫–æ–¥–∏—Ä–æ–≤–∫–∏: utf-8/utf-8-sig/cp1251
    - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π
    - –Ω–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    - –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏–π
    """
    txt = _decode_bytes(b)
    rows: List[Tuple[int, str, str]] = []

    for raw in txt.splitlines():
        line = raw.strip()
        if not line:
            continue
        parts = re.split(r"[;,]", line)
        parts = [p.strip() for p in parts if p.strip() != ""]
        if len(parts) < 3:
            # –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –º—É—Å–æ—Ä
            continue
        room, maid, ctype = parts[0], parts[1], parts[2]
        # –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if not room.isdigit():
            # –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º
            continue
        try:
            rno = int(room)
        except ValueError:
            continue
        rows.append((rno, maid, ctype))
    return rows

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–º–∞–Ω–¥—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ —É–±–æ—Ä–æ–∫.\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/upload_plan ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω (CSV)\n"
    "/report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "/export_csv ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω –≤ CSV\n"
    "/export_xlsx ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω –≤ XLSX\n"
    "/clear_today ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–ª–∞–Ω (–∞–¥–º–∏–Ω)\n\n"
    "–§–æ—Ä–º–∞—Ç CSV (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤):\n"
    "`101,–°–µ–≤–∞—Ä–∞,–ü–æ–ª–Ω–∞—è`\n"
    "`102,–ì—É–ª—å–Ω–æ–∑,–¢–µ–∫—É—â–∞—è`\n"
    "–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è: UTF-8/UTF-8-BOM/cp1251, –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ `;`.\n"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, parse_mode="Markdown")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, parse_mode="Markdown")

def _is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS or (REPORT_CHAT_ID != 0 and user_id == REPORT_CHAT_ID)

async def clear_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å –ø–ª–∞–Ω.")
        return
    d = day_str()
    clear_day(d)
    await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ {d} –æ—á–∏—â–µ–Ω.")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = day_str()
    total, done, left = get_stats(d)
    rows = get_rooms(d)
    lines = [f"üßπ –û—Ç—á—ë—Ç –∑–∞ {d}\n–í—Å–µ–≥–æ: {total} | –ì–æ—Ç–æ–≤–æ: {done} | –û—Å—Ç–∞–ª–æ—Å—å: {left}", ""]
    by_maid = {}
    for r in rows:
        by_maid.setdefault(r["maid"], []).append(r)
    for maid, lst in sorted(by_maid.items()):
        lines.append(f"‚Äî {maid}: {len(lst)} –Ω–æ–º–µ—Ä–æ–≤")
    await update.message.reply_text("\n".join(lines))

async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = day_str()
    rows = get_rooms(d)
    buff = io.StringIO()
    w = csv.writer(buff)
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
    w.writerow(["–î–∞—Ç–∞", "‚Ññ –ù–æ–º–µ—Ä–∞", "–ì–æ—Ä–Ω–∏—á–Ω–∞—è", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    for r in rows:
        w.writerow([d, r["room_no"], r["maid"], r["ctype"], r["status"], r["comment"]])
    buff.seek(0)
    await update.message.reply_document(
        document=InputFile(io.BytesIO(buff.getvalue().encode("utf-8")), filename=f"cleaning_{d}.csv")
    )

async def export_xlsx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = day_str()
    rows = get_rooms(d)
    wb = Workbook()
    ws = wb.active
    ws.title = "–£–±–æ—Ä–∫–∞"
    ws.append(["–î–∞—Ç–∞", "‚Ññ –ù–æ–º–µ—Ä–∞", "–ì–æ—Ä–Ω–∏—á–Ω–∞—è", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    for r in rows:
        ws.append([d, r["room_no"], r["maid"], r["ctype"], r["status"], r["comment"]])

    bio = io.BytesIO()
    wb.save(bio)
    bio.seek(0)
    await update.message.reply_document(
        document=InputFile(bio, filename=f"cleaning_{d}.xlsx")
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
UPLOAD_PROMPT = (
    "–ü—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª –ø–ª–∞–Ω–∞.\n"
    "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫: `room_no,maid,cleaning_type` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `101,–°–µ–≤–∞—Ä–∞,–ü–æ–ª–Ω–∞—è`).\n"
    "–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 / UTF-8-BOM / cp1251, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ `,` –∏–ª–∏ `;`.\n"
)

async def upload_plan_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["await_csv"] = True
    await update.message.reply_text(UPLOAD_PROMPT, parse_mode="Markdown")

async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª –ª–∏–±–æ –ø–æ—Å–ª–µ /upload_plan, –ª–∏–±–æ –µ—Å–ª–∏ —ç—Ç–æ CSV
    doc = update.message.document
    if not doc:
        return

    filename = (doc.file_name or "").lower()
    expecting = context.user_data.get("await_csv", False)
    if not expecting and not filename.endswith(".csv"):
        return

    f = await doc.get_file()
    b = await f.download_as_bytearray()
    rows = parse_plan_csv_bytes(bytes(b))

    if not rows:
        preview = _decode_bytes(bytes(b))[:160].replace("\n", "\\n")
        await update.message.reply_text(
            "–í CSV –Ω–µ –Ω–∞—à—ë–ª —Å—Ç—Ä–æ–∫.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (`,` –∏–ª–∏ `;`), –∫–æ–¥–∏—Ä–æ–≤–∫—É (UTF-8/UTF-8-BOM/cp1251), "
            "–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫/–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.\n\n"
            f"*–ü–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Ñ–∞–π–ª–∞:* `{preview}`",
            parse_mode="Markdown",
        )
        return

    d = day_str()
    # –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å ‚Äî –æ—á–∏—â–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–ª–∞–Ω –∏ –∑–∞–ª–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    clear_day(d)
    insert_rows(d, rows)
    total, done, left = get_stats(d)
    context.user_data["await_csv"] = False
    await update.message.reply_text(
        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)} ‚úÖ\n"
        f"–í—Å–µ–≥–æ: {total} | –ì–æ—Ç–æ–≤–æ: {done} | –û—Å—Ç–∞–ª–æ—Å—å: {left}"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ê–≤—Ç–æ–æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ timezone)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def next_run_utc() -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ UTC, –∏—Å—Ö–æ–¥—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω—ã –∏ REPORT_TIME."""
    hh, mm = 18, 0
    try:
        hh, mm = [int(x) for x in REPORT_TIME.split(":")]
    except Exception:
        pass

    local_today = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
    if local_today <= now_local():
        local_today += timedelta(days=1)
    return local_today.astimezone(pytz.UTC)

async def send_report(context: ContextTypes.DEFAULT_TYPE):
    if not REPORT_CHAT_ID:
        return
    d = day_str()
    total, done, left = get_stats(d)
    msg = f"üßπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç {d}\n–í—Å–µ–≥–æ: {total} | –ì–æ—Ç–æ–≤–æ: {done} | –û—Å—Ç–∞–ª–æ—Å—å: {left}"
    try:
        await context.bot.send_message(chat_id=REPORT_CHAT_ID, text=msg)
    except Exception:
        pass

def schedule_daily_job(app):
    # –ü–µ—Ä–≤–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ ‚Äî –≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –¥–∞–ª—å—à–µ ‚Äî –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    first_run = next_run_utc()
    app.job_queue.run_repeating(send_report, interval=24*60*60, first=first_run)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Main
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def validate_env():
    print(f"[ENV] BOT_TOKEN set? {'yes' if BOT_TOKEN else 'no'}; length={len(BOT_TOKEN)}")
    print(f"[ENV] TIMEZONE='{TIMEZONE}' REPORT_TIME='{REPORT_TIME}' AUTOCARRYOVER={AUTOCARRYOVER}")
    print(f"[ENV] REPORT_CHAT_ID={REPORT_CHAT_ID} ADMIN_IDS={ADMIN_IDS}")
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ –≤ Render ‚Üí Environment ‚Üí BOT_TOKEN=<—Ç–æ–∫–µ–Ω –æ—Ç @BotFather>.")

def main():
    validate_env()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("upload_plan", upload_plan_cmd))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("export_csv", export_csv))
    app.add_handler(CommandHandler("export_xlsx", export_xlsx))
    app.add_handler(CommandHandler("clear_today", clear_today))

    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))

    # –ê–≤—Ç–æ–æ—Ç—á—ë—Ç
    schedule_daily_job(app)

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
